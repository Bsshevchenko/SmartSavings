#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤ —Å —É—á—ë—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
"""
import asyncio
import logging
import sys
import os
from decimal import Decimal
from datetime import date, datetime, timezone
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text, select

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.db.models import Base, Entry, Currency, Category

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def get_migration_session():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏."""
    import os
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
    db_path = os.path.join(os.path.dirname(__file__), "..", "data", "app.db")
    db_url = f"sqlite+aiosqlite:///{db_path}"
    
    engine = create_async_engine(db_url)
    SessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    return SessionLocal()

async def recreate_asset_latest_values_table():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É asset_latest_values —Å —É—á—ë—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    import os
    
    db_path = os.path.join(os.path.dirname(__file__), "..", "data", "app.db")
    db_url = f"sqlite+aiosqlite:///{db_path}"
    
    engine = create_async_engine(db_url)
    
    async with engine.begin() as conn:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        await conn.execute(text("DROP TABLE IF EXISTS asset_latest_values"))
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        await conn.execute(text("""
            CREATE TABLE asset_latest_values (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id BIGINT NOT NULL,
                currency_code VARCHAR(10) NOT NULL,
                category_name VARCHAR(64),
                amount NUMERIC(28, 10) NOT NULL,
                last_updated DATETIME NOT NULL,
                entry_id INTEGER,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (entry_id) REFERENCES entries(id) ON DELETE SET NULL
            )
        """))
        
        # –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        await conn.execute(text("""
            CREATE UNIQUE INDEX uq_asset_latest_user_currency_category 
            ON asset_latest_values (user_id, currency_code, category_name)
        """))
        
        await conn.execute(text("""
            CREATE INDEX ix_asset_latest_user_currency_category 
            ON asset_latest_values (user_id, currency_code, category_name)
        """))
    
    await engine.dispose()
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ asset_latest_values –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å —É—á—ë—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

async def migrate_assets_with_categories():
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤—ã —Å —É—á—ë—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    async with await get_migration_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–∞–º–∏
        users_result = await session.execute(
            text("SELECT DISTINCT user_id FROM entries WHERE mode = 'asset'")
        )
        user_ids = [row[0] for row in users_result.fetchall()]
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–∞–º–∏")
        
        for user_id in user_ids:
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤–∞–ª—é—Ç–∞ + –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            latest_assets_result = await session.execute(
                text("""
                    SELECT 
                        c.code as currency_code,
                        cat.name as category_name,
                        e.amount,
                        e.created_at,
                        e.id as entry_id
                    FROM entries e
                    LEFT JOIN currencies c ON e.currency_id = c.id
                    LEFT JOIN categories cat ON e.category_id = cat.id
                    WHERE e.user_id = :user_id AND e.mode = 'asset'
                    AND (e.currency_id, e.category_id, e.created_at) IN (
                        SELECT currency_id, category_id, MAX(created_at)
                        FROM entries e2
                        WHERE e2.user_id = e.user_id 
                        AND e2.mode = 'asset'
                        GROUP BY currency_id, category_id
                    )
                """),
                {"user_id": user_id}
            )
            
            latest_assets = latest_assets_result.fetchall()
            logger.info(f"  –ù–∞–π–¥–µ–Ω–æ {len(latest_assets)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤")
            
            for currency_code, category_name, amount, created_at, entry_id in latest_assets:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                await session.execute(
                    text("""
                        INSERT INTO asset_latest_values 
                        (user_id, currency_code, category_name, amount, last_updated, entry_id)
                        VALUES (:user_id, :currency_code, :category_name, :amount, :created_at, :entry_id)
                    """),
                    {
                        "user_id": user_id,
                        "currency_code": currency_code,
                        "category_name": category_name,
                        "amount": amount,
                        "created_at": created_at,
                        "entry_id": entry_id
                    }
                )
                logger.info(f"    –°–æ—Ö—Ä–∞–Ω—ë–Ω –∞–∫—Ç–∏–≤: {currency_code} {category_name} = {amount}")
            
            await session.commit()
        
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏."""
    async with await get_migration_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤
        result = await session.execute(
            text("SELECT COUNT(*) FROM asset_latest_values")
        )
        total_assets = result.scalar()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 614688432
        result = await session.execute(
            text("""
                SELECT currency_code, category_name, amount 
                FROM asset_latest_values 
                WHERE user_id = 614688432
                ORDER BY currency_code, category_name
            """)
        )
        user_assets = result.fetchall()
        
        logger.info(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤ –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ: {total_assets}")
        logger.info(f"üìä –ê–∫—Ç–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 614688432:")
        
        total_rub = 0
        for currency_code, category_name, amount in user_assets:
            logger.info(f"  ‚Ä¢ {currency_code} {category_name}: {amount}")
            if currency_code == "RUB":
                total_rub += float(amount)
        
        logger.info(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤ RUB: {total_rub:,.2f}")

async def main():
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –∞–∫—Ç–∏–≤–æ–≤ —Å —É—á—ë—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    await recreate_asset_latest_values_table()
    await migrate_assets_with_categories()
    await verify_migration()
    logger.info("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main())
