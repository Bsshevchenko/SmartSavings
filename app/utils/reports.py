from app.utils.formatting import fmt_money_str, fmt_crypto_str, format_ru_month_label


def report_for_expense(label: str, totals: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return "\n".join([
        f"üìÖ {label}:",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(totals['RUB']))} RUB",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(totals['USD']))} USD",
        f"‚Ä¢ üáªüá≥ {fmt_money_str(str(totals['VND']))} VND"
    ])


def report_for_income(label: str, totals: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return "\n".join([
        f"üí∞ {label}:",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(totals['RUB']))} RUB",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(totals['USD']))} USD",
        f"‚Ä¢ üáªüá≥ {fmt_money_str(str(totals['VND']))} VND"
    ])


def report_for_assets(label: str, totals: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ –∫–∞–ø–∏—Ç–∞–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return "\n".join([
        f"üí∞ –ö–∞–ø–∏—Ç–∞–ª –Ω–∞ {label}:",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(totals['RUB']))} RUB",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(totals['USD']))} USD",
    ])


def report_asset_growth(prev_date, current_date, prev_capital: dict, current_capital: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ —Ä–æ—Å—Ç–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏."""
    prev_month_name = format_ru_month_label(prev_date)
    current_month_name = format_ru_month_label(current_date)

    rub_growth = current_capital.get('RUB', 0) - prev_capital.get('RUB', 0)
    usd_growth = current_capital.get('USD', 0) - prev_capital.get('USD', 0)

    rub_growth_percent = (rub_growth / prev_capital['RUB'] * 100) if prev_capital.get('RUB', 0) > 0 else 0
    usd_growth_percent = (usd_growth / prev_capital['USD'] * 100) if prev_capital.get('USD', 0) > 0 else 0

    growth_emoji_rub = "üìà" if rub_growth >= 0 else "üìâ"
    growth_emoji_usd = "üìà" if usd_growth >= 0 else "üìâ"

    lines = [
        "üìä –î–∏–Ω–∞–º–∏–∫–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:",
        "",
        "üá∑üá∫ RUB:",
        f"  {prev_month_name}: {fmt_money_str(str(prev_capital.get('RUB', 0)))}",
        f"  {current_month_name}: {fmt_money_str(str(current_capital.get('RUB', 0)))}",
        f"  {growth_emoji_rub} {fmt_money_str(str(rub_growth))} ({rub_growth_percent:+.1f}%)",
        "",
        "üá∫üá∏ USD:",
        f"  {prev_month_name}: {fmt_money_str(str(prev_capital.get('USD', 0)))}",
        f"  {current_month_name}: {fmt_money_str(str(current_capital.get('USD', 0)))}",
        f"  {growth_emoji_usd} {fmt_money_str(str(usd_growth))} ({usd_growth_percent:+.1f}%)",
    ]
    return "\n".join(lines)


def report_asset_snapshot_created(capital: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω—ç–ø—à–æ—Ç–∞ –∏ —Ç–µ–∫—É—â–µ–º –∫–∞–ø–∏—Ç–∞–ª–µ."""
    return "\n".join([
        "üì∏ –°–Ω—ç–ø—à–æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ —Å–æ–∑–¥–∞–Ω!",
        "",
        f"üìä –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(capital.get('RUB', 0)))} RUB",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(capital.get('USD', 0)))} USD",
        "",
        "üí° –°–Ω—ç–ø—à–æ—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∫–∞–ø–∏—Ç–∞–ª–∞.",
    ])


def report_assets_detailed_list(assets_by_currency: dict, total_usd: float, total_rub: float, updated_at) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –∏ –æ–±—â–∏–µ –∏—Ç–æ–≥–∏.

    assets_by_currency: { currency: [AssetLatestValues, ...] }
    updated_at: datetime | str | None
    """
    parts = ["üíº **–î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤:**\n"]

    for currency, currency_assets in assets_by_currency.items():
        parts.append(f"***{currency}:***")
        for asset in currency_assets:
            amount = float(asset.amount)
            category_name = asset.category_name or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            if currency in ["BTC", "ETH", "SOL", "USDT", "USDC", "TRX"]:
                formatted_amount = fmt_crypto_str(str(amount), currency)
            else:
                formatted_amount = fmt_money_str(str(amount))
            parts.append(f"  {category_name}: {formatted_amount}")
        parts.append("")

    parts.extend([
        "üìä **–û–±—â–∏–µ –∏—Ç–æ–≥–∏:**",
        f"‚Ä¢ üá∫üá∏ **USD:** {fmt_money_str(str(total_usd))}",
        f"‚Ä¢ üá∑üá∫ **RUB:** {fmt_money_str(str(total_rub))}",
        "",
        f"üìÖ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {updated_at.strftime('%d.%m.%Y %H:%M') if hasattr(updated_at, 'strftime') else (updated_at or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
    ])

    return "\n".join(parts)


def report_asset_no_history(current_capital: dict) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ç–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª –µ—Å—Ç—å, –∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç."""
    return "\n".join([
        "üìä –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(current_capital.get('RUB', 0)))} RUB",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(current_capital.get('USD', 0)))} USD",
        "",
        "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.",
    ])
