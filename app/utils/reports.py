from app.utils.formatting import fmt_money_str, fmt_crypto_str, format_ru_month_label


def report_for_expense(label: str, totals: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return "\n".join([
        f"üìÖ {label}:",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(totals['RUB']))} RUB",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(totals['USD']))} USD",
        f"‚Ä¢ üáªüá≥ {fmt_money_str(str(totals['VND']))} VND"
    ])


def report_for_income(label: str, totals: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return "\n".join([
        f"üí∞ {label}:",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(totals['RUB']))} RUB",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(totals['USD']))} USD",
        f"‚Ä¢ üáªüá≥ {fmt_money_str(str(totals['VND']))} VND"
    ])


def report_for_assets(label: str, totals: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ –∫–∞–ø–∏—Ç–∞–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return "\n".join([
        f"üí∞ –ö–∞–ø–∏—Ç–∞–ª –Ω–∞ {label}:",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(totals['RUB']))} RUB",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(totals['USD']))} USD",
    ])


def report_asset_growth(prev_date, current_date, prev_capital: dict, current_capital: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ —Ä–æ—Å—Ç–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏."""
    prev_month_name = format_ru_month_label(prev_date)
    current_month_name = format_ru_month_label(current_date)

    rub_growth = current_capital.get('RUB', 0) - prev_capital.get('RUB', 0)
    usd_growth = current_capital.get('USD', 0) - prev_capital.get('USD', 0)

    rub_growth_percent = (rub_growth / prev_capital['RUB'] * 100) if prev_capital.get('RUB', 0) > 0 else 0
    usd_growth_percent = (usd_growth / prev_capital['USD'] * 100) if prev_capital.get('USD', 0) > 0 else 0

    growth_emoji_rub = "üìà" if rub_growth >= 0 else "üìâ"
    growth_emoji_usd = "üìà" if usd_growth >= 0 else "üìâ"

    lines = [
        "üìä –î–∏–Ω–∞–º–∏–∫–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:",
        "",
        "üá∑üá∫ RUB:",
        f"  {prev_month_name}: {fmt_money_str(str(prev_capital.get('RUB', 0)))}",
        f"  {current_month_name}: {fmt_money_str(str(current_capital.get('RUB', 0)))}",
        f"  {growth_emoji_rub} {fmt_money_str(str(rub_growth))} ({rub_growth_percent:+.1f}%)",
        "",
        "üá∫üá∏ USD:",
        f"  {prev_month_name}: {fmt_money_str(str(prev_capital.get('USD', 0)))}",
        f"  {current_month_name}: {fmt_money_str(str(current_capital.get('USD', 0)))}",
        f"  {growth_emoji_usd} {fmt_money_str(str(usd_growth))} ({usd_growth_percent:+.1f}%)",
    ]
    return "\n".join(lines)


def report_asset_snapshot_created(capital: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω—ç–ø—à–æ—Ç–∞ –∏ —Ç–µ–∫—É—â–µ–º –∫–∞–ø–∏—Ç–∞–ª–µ."""
    return "\n".join([
        "üì∏ –°–Ω—ç–ø—à–æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ —Å–æ–∑–¥–∞–Ω!",
        "",
        f"üìä –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(capital.get('RUB', 0)))} RUB",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(capital.get('USD', 0)))} USD",
        "",
        "üí° –°–Ω—ç–ø—à–æ—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∫–∞–ø–∏—Ç–∞–ª–∞.",
    ])


def report_assets_detailed_list(assets_by_currency: dict, total_usd: float, total_rub: float, updated_at, unknown_currencies: set[str] | None = None) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –∏ –æ–±—â–∏–µ –∏—Ç–æ–≥–∏.

    –í–∏–∑—É–∞–ª—å–Ω–æ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –≤–Ω—É—Ç—Ä–∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ "<amount> <currency>".
    assets_by_currency: { currency: [AssetLatestValues, ...] }
    updated_at: datetime | str | None
    """
    parts = ["üíº <b>–î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤:</b>\n"]

    unknown_currencies = unknown_currencies or set()

    # –ü–µ—Ä–µ–≥—Ä—É–ø–ø–∏—Ä—É–µ–º: –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> [(amount, currency_code)]
    categories: dict[str, list[tuple[float, str]]] = {}
    for currency, currency_assets in assets_by_currency.items():
        for asset in currency_assets:
            category = asset.category_name or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            categories.setdefault(category, []).append((float(asset.amount), currency))

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    preferred = ["–ê–∫—Ü–∏–∏", "–í–∫–ª–∞–¥", "–ò–Ω–≤–µ—Å—Ç–∫–æ–ø–∏–ª–∫–∞", "–ö—Ä–∏–ø—Ç–∞"]
    ordered_categories = [c for c in preferred if c in categories] + sorted(
        [c for c in categories.keys() if c not in preferred]
    )

    icon_by_category = {
        "–∞–∫—Ü–∏–∏": "üìà",
        "–≤–∫–ª–∞–¥": "üè¶",
        "–∏–Ω–≤–µ—Å—Ç–∫–æ–ø–∏–ª–∫–∞": "üí∞",
        "–∫—Ä–∏–ø—Ç–∞": "ü™ô",
        "–∫—ç—à": "üíµ",
    }

    for category in ordered_categories:
        icon = icon_by_category.get(category.strip().lower(), "üóÇÔ∏è")
        parts.append(f"{icon} <b>{category}:</b>")
        for amount, currency in categories[category]:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É: –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü-—Ñ–æ—Ä–º–∞—Ç, –∏–Ω–∞—á–µ –¥–µ–Ω–µ–∂–Ω—ã–π
            if currency in ["BTC", "ETH", "SOL", "USDT", "USDC", "TRX"]:
                amt_str = fmt_crypto_str(str(amount), currency)
            else:
                amt_str = fmt_money_str(str(amount))

            suffix = " (–≤–∞–ª—é—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞)" if currency in unknown_currencies else ""
            parts.append(f"  {amt_str} {currency}{suffix}")
        parts.append("")

    parts.extend([
        "üìä <b>–û–±—â–∏–µ –∏—Ç–æ–≥–∏:</b>",
        f"‚Ä¢ üá∫üá∏ <b>USD:</b> {fmt_money_str(str(total_usd))}",
        f"‚Ä¢ üá∑üá∫ <b>RUB:</b> {fmt_money_str(str(total_rub))}",
        "",
        f"üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_at.strftime('%d.%m.%Y %H:%M') if hasattr(updated_at, 'strftime') else (updated_at or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
    ])

    return "\n".join(parts)


def report_asset_no_history(current_capital: dict) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ç–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª –µ—Å—Ç—å, –∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç."""
    return "\n".join([
        "üìä –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(current_capital.get('RUB', 0)))} RUB",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(current_capital.get('USD', 0)))} USD",
        "",
        "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.",
    ])
