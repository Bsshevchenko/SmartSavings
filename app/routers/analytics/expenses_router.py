from aiogram import Router, F
from aiogram.types import Message
from datetime import datetime

from app.db import get_session
from app.utils.reports import report_for_expense
from app.utils.date_ranges import get_today_range, get_this_week_range, get_this_month_range
from app.repo.entry_fetcher import EntryFetcher


expenses_router = Router()


async def _send_expense_report(message: Message, label: str, date_range: tuple[datetime, datetime]):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.

    :param message: –û–±—ä–µ–∫—Ç Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è.
    :param label: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ª–µ–π–±–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è").
    :param date_range: –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (start, end).
    """
    user_id = message.from_user.id
    
    async with await get_session() as session:
        fetcher = EntryFetcher(session, user_id)

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        entries, currency_map = await fetcher.fetch_entries(date_range, mode="expense")

        if not entries:
            await message.answer(f"üìä {label}: —É –≤–∞—Å –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Ö–æ–¥–æ–≤.")
            return

        # 2. –°—á–∏—Ç–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Ç–æ–≥–∏
        totals = await fetcher.calculate_converted_totals(entries, currency_map)

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
        text = report_for_expense(label, totals)
        await message.answer(text)


@expenses_router.message(F.text == "/expenses_today")
async def handle_expenses_today(message: Message):
    await _send_expense_report(message, "–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è", get_today_range())


@expenses_router.message(F.text == "/expenses_week")
async def handle_expenses_this_week(message: Message):
    await _send_expense_report(message, "–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é", get_this_week_range())


@expenses_router.message(F.text == "/expenses_month")
async def handle_expenses_month(message: Message):
    await _send_expense_report(message, "–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", get_this_month_range())


@expenses_router.message(F.text == "/debug_test")
async def debug_test(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
    user_id = message.from_user.id
    
    async with await get_session() as session:
        from sqlalchemy import text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î
            result = await session.execute(text("SELECT COUNT(*) FROM entries"))
            total_all_entries = result.scalar()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(text("SELECT COUNT(*) FROM entries WHERE user_id = :user_id"), {"user_id": user_id})
            total_entries = result.scalar()
            
            result = await session.execute(text("SELECT COUNT(*) FROM entries WHERE user_id = :user_id AND mode = 'expense'"), {"user_id": user_id})
            expense_entries = result.scalar()
            
            result = await session.execute(text("SELECT COUNT(*) FROM entries WHERE user_id = :user_id AND mode = 'asset'"), {"user_id": user_id})
            asset_entries = result.scalar()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ user_id –≤ –ë–î
            result = await session.execute(text("SELECT DISTINCT user_id FROM entries LIMIT 5"))
            all_user_ids = [row[0] for row in result.fetchall()]
            
            await message.answer(
                f"üîç –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {total_all_entries}\n"
                f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {total_entries}\n"
                f"‚Ä¢ –†–∞—Å—Ö–æ–¥–æ–≤: {expense_entries}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–æ–≤: {asset_entries}\n"
                f"‚Ä¢ User ID –≤ –ë–î: {all_user_ids}"
            )
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}")


@expenses_router.message(F.text == "/debug_crypto")
async def debug_crypto(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."""
    user_id = message.from_user.id
    
    async with await get_session() as session:
        from app.services.capital_analytics import CapitalAnalyticsService
        from app.utils.rates import CurrencyConverter
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
            result = await session.execute(text("SELECT currency_code, amount FROM asset_latest_values WHERE user_id = :user_id"), {"user_id": user_id})
            assets = result.fetchall()
            
            converter = CurrencyConverter()
            await converter.update_fiat_rates()
            await converter.update_crypto_rates()
            
            total_usd = 0
            details = []
            
            for currency_code, amount in assets:
                try:
                    converted = await converter.convert(float(amount), currency_code, "USD")
                    total_usd += converted
                    details.append(f"‚Ä¢ {currency_code}: {amount} = ${converted:.2f}")
                except Exception as e:
                    details.append(f"‚Ä¢ {currency_code}: {amount} = –û–®–ò–ë–ö–ê: {str(e)}")
            
            await message.answer(
                f"üîç –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n" +
                "\n".join(details) + 
                f"\n\nüí∞ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${total_usd:.2f}"
            )
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –∫—Ä–∏–ø—Ç–æ: {str(e)}")


@expenses_router.message(F.text == "/debug_new_capital")
async def debug_new_capital(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞."""
    user_id = message.from_user.id
    
    async with await get_session() as session:
        from app.services.capital_analytics import CapitalAnalyticsService
        
        try:
            analytics_service = CapitalAnalyticsService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–ª –≤ USD –∏ RUB
            capital_usd = await analytics_service.get_current_capital(user_id, "USD")
            capital_rub = await analytics_service.get_current_capital(user_id, "RUB")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∞–∫—Ç–∏–≤–∞–º
            result = await session.execute(text("""
                SELECT currency_code, category_name, amount 
                FROM asset_latest_values 
                WHERE user_id = :user_id
                ORDER BY currency_code, category_name
            """), {"user_id": user_id})
            
            assets = result.fetchall()
            
            details = []
            for currency_code, category_name, amount in assets:
                details.append(f"‚Ä¢ {currency_code} {category_name}: {amount}")
            
            await message.answer(
                f"üí∞ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n" +
                f"üìä –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:\n" +
                f"‚Ä¢ USD: ${capital_usd:,.2f}\n" +
                f"‚Ä¢ RUB: {capital_rub:,.0f}‚ÇΩ\n\n" +
                f"üìã –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–æ–≤:\n" +
                "\n".join(details)
            )
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞: {str(e)}")


@expenses_router.message(F.text == "/debug_grow")
async def debug_grow(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞."""
    user_id = message.from_user.id
    
    async with await get_session() as session:
        from app.services.capital_analytics import CapitalAnalyticsService
        from datetime import datetime, timedelta, timezone
        
        try:
            analytics_service = CapitalAnalyticsService(session)
            
            now = datetime.now(timezone.utc)
            current_capital_usd = await analytics_service.get_current_capital(user_id, "USD")
            current_capital_rub = await analytics_service.get_current_capital(user_id, "RUB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            prev_month_last_day = now.replace(day=1) - timedelta(days=1)
            
            prev_capital_usd = await analytics_service.get_capital_for_date(user_id, prev_month_last_day.date(), "USD")
            prev_capital_rub = await analytics_service.get_capital_for_date(user_id, prev_month_last_day.date(), "RUB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–Ω—ç–ø—à–æ—Ç—ã
            result = await session.execute(text("""
                SELECT COUNT(*) FROM capital_snapshots WHERE user_id = :user_id
            """), {"user_id": user_id})
            snapshots_count = result.scalar()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü –≤ entries
            prev_month_start = prev_month_last_day.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            prev_month_end = prev_month_start.replace(month=prev_month_start.month + 1) if prev_month_start.month < 12 else prev_month_start.replace(year=prev_month_start.year + 1, month=1)
            
            result = await session.execute(text("""
                SELECT COUNT(*) FROM entries 
                WHERE user_id = :user_id AND mode = 'asset' 
                AND created_at >= :start AND created_at < :end
            """), {
                "user_id": user_id,
                "start": prev_month_start,
                "end": prev_month_end
            })
            entries_in_prev_month = result.scalar()
            
            await message.answer(
                f"üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n" +
                f"üìä –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª (–æ–∫—Ç—è–±—Ä—å 2025):\n" +
                f"‚Ä¢ USD: ${current_capital_usd:,.2f}\n" +
                f"‚Ä¢ RUB: {current_capital_rub:,.0f}‚ÇΩ\n\n" +
                f"üìÖ –ö–∞–ø–∏—Ç–∞–ª –Ω–∞ {prev_month_last_day.date()} (–∫–æ–Ω–µ—Ü —Å–µ–Ω—Ç—è–±—Ä—è):\n" +
                f"‚Ä¢ USD: ${prev_capital_usd:,.2f}\n" +
                f"‚Ä¢ RUB: {prev_capital_rub:,.0f}‚ÇΩ\n\n" +
                f"üì∏ –°–Ω—ç–ø—à–æ—Ç–æ–≤ –≤ –ë–î: {snapshots_count}\n" +
                f"üìù –ó–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–æ–≤ –≤ —Å–µ–Ω—Ç—è–±—Ä–µ: {entries_in_prev_month}\n\n" +
                f"üìà –†–æ—Å—Ç USD: ${current_capital_usd - prev_capital_usd:,.2f}\n" +
                f"üìà –†–æ—Å—Ç RUB: {current_capital_rub - prev_capital_rub:,.0f}‚ÇΩ"
            )
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ä–æ—Å—Ç–∞: {str(e)}")


@expenses_router.message(F.text == "/reset_rates_cache")
async def reset_rates_cache(message: Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç."""
    try:
        from app.utils.rates import _rates_cache
        _rates_cache["fiat"]["timestamp"] = None
        _rates_cache["crypto"]["timestamp"] = None
        _rates_cache["fiat"]["data"] = {}
        _rates_cache["crypto"]["data"] = {}
        
        await message.answer("‚úÖ –ö—ç—à –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å–±—Ä–æ—à–µ–Ω. –°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤–µ–∂–∏–µ –∫—É—Ä—Å—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞: {str(e)}")


@expenses_router.message(F.text == "/debug_assets")
async def debug_assets(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–æ–≤ –≤ –ë–î."""
    user_id = message.from_user.id
    
    async with await get_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ entries
            result = await session.execute(text("""
                SELECT e.id, c.code, cat.name, e.amount, e.created_at
                FROM entries e
                LEFT JOIN currencies c ON e.currency_id = c.id
                LEFT JOIN categories cat ON e.category_id = cat.id
                WHERE e.user_id = :user_id AND e.mode = 'asset'
                ORDER BY e.created_at DESC
                LIMIT 10
            """), {"user_id": user_id})
            
            entries = result.fetchall()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ asset_latest_values
            result = await session.execute(text("""
                SELECT currency_code, category_name, amount, last_updated
                FROM asset_latest_values
                WHERE user_id = :user_id
                ORDER BY currency_code, category_name
            """), {"user_id": user_id})
            
            latest_assets = result.fetchall()
            
            entries_text = "\n".join([
                f"‚Ä¢ ID {entry[0]}: {entry[1]} {entry[2]} = {entry[3]} ({entry[4]})"
                for entry in entries
            ])
            
            latest_text = "\n".join([
                f"‚Ä¢ {asset[0]} {asset[1]}: {asset[2]} ({asset[3]})"
                for asset in latest_assets
            ])
            
            await message.answer(
                f"üîç –û—Ç–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n" +
                f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ entries:\n{entries_text}\n\n" +
                f"üìä –ó–∞–ø–∏—Å–∏ –≤ asset_latest_values:\n{latest_text}"
            )
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–æ–≤: {str(e)}")
