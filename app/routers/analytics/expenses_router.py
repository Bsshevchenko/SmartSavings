from aiogram import Router, F
from aiogram.types import Message
from datetime import datetime

from app.db import get_session
from app.utils.reports import report_for_expense
from app.utils.date_ranges import get_today_range, get_this_week_range, get_this_month_range
from app.services.report_service import ReportService


expenses_router = Router()


async def _send_expense_report(message: Message, label: str, date_range: tuple[datetime, datetime]):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.

    :param message: –û–±—ä–µ–∫—Ç Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è.
    :param label: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ª–µ–π–±–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è").
    :param date_range: –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (start, end).
    """
    user_id = message.from_user.id
    session = await get_session()

    service = ReportService(session)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    totals = await service.get_period_totals(user_id, date_range, "expense", ["RUB", "USD", "VND"])

    if not totals or all(value == 0 for value in totals.values()):
        await message.answer(f"üìä {label}: —É –≤–∞—Å –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
    text = report_for_expense(label, totals)
    await message.answer(text)


@expenses_router.message(F.text == "/expenses_today")
async def handle_expenses_today(message: Message):
    await _send_expense_report(message, "–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è", get_today_range())


@expenses_router.message(F.text == "/expenses_week")
async def handle_expenses_this_week(message: Message):
    await _send_expense_report(message, "–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é", get_this_week_range())


@expenses_router.message(F.text == "/expenses_month")
async def handle_expenses_month(message: Message):
    await _send_expense_report(message, "–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", get_this_month_range())
