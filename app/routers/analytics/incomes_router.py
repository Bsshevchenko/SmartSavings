from aiogram import Router, F
from aiogram.types import Message
from datetime import datetime

from app.db import get_session
from app.utils.reports import report_for_income
from app.utils.date_ranges import get_this_month_range
from app.repo.entry_fetcher import EntryFetcher


incomes_router = Router()


async def _send_income_report(message: Message, label: str, date_range: tuple[datetime, datetime]):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—á—ë—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.

    :param message: –û–±—ä–µ–∫—Ç Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è.
    :param label: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ª–µ–π–±–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü").
    :param date_range: –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (start, end).
    """
    user_id = message.from_user.id
    session = await get_session()

    fetcher = EntryFetcher(session, user_id)

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    entries, currency_map = await fetcher.fetch_entries(date_range, mode="income")

    if not entries:
        await message.answer(f"üí∞ {label}: —É –≤–∞—Å –Ω–µ –±—ã–ª–æ –¥–æ—Ö–æ–¥–æ–≤.")
        return

    # 2. –°—á–∏—Ç–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Ç–æ–≥–∏
    totals = await fetcher.calculate_converted_totals(entries, currency_map)

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
    text = report_for_income(label, totals)
    await message.answer(text)


@incomes_router.message(F.text == "/get_incomes")
async def handle_get_incomes(message: Message):
    await _send_income_report(message, "–î–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", get_this_month_range())
