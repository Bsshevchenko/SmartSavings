from aiogram import Router, F
from aiogram.types import Message
from datetime import datetime, timedelta, timezone

from app.db import get_session
from app.utils.reports import report_for_assets
from app.utils.formatting import format_ru_month_label, fmt_money_str, fmt_crypto_str
from app.services.asset_service import AssetService

asset_router = Router()


@asset_router.message(F.text == "/get_asset")
async def get_asset(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_asset: –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª."""

    user_id = message.from_user.id
    
    async with await get_session() as session:
        try:
            service = AssetService(session)
            capital = await service.get_current_capital(user_id, ["RUB", "USD"])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤—ã
            if all(value == 0 for value in capital.values()):
                await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤.")
                return
            
            await message.answer(report_for_assets(label="–¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª", totals=capital))
            
        except Exception as e:
            print(f"ERROR in get_asset: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∫–∞–ø–∏—Ç–∞–ª–∞: {str(e)}")


@asset_router.message(F.text == "/grow_asset")
async def grow_asset(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /grow_asset: –≤—ã–≤–æ–¥–∏—Ç —Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º."""

    user_id = message.from_user.id
    async with await get_session() as session:
        service = AssetService(session)
        
        try:
            now = datetime.now(timezone.utc)
            
            # –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª
            current_capital = await service.get_current_capital(user_id, ["RUB", "USD"])
            
            # –ö–∞–ø–∏—Ç–∞–ª –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
            prev_month_last_day = now.replace(day=1) - timedelta(days=1)
            prev_capital = await service.get_capital_for_date(user_id, prev_month_last_day.date(), ["RUB", "USD"])
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            if all(value == 0 for value in current_capital.values()) and all(value == 0 for value in prev_capital.values()):
                await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤.")
                return
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if all(value == 0 for value in prev_capital.values()):
                await message.answer(
                    f"üìä –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:\n"
                    f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(current_capital['RUB']))} RUB\n"
                    f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(current_capital['USD']))} USD\n\n"
                    f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç."
                )
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Ç
            rub_growth = current_capital['RUB'] - prev_capital['RUB']
            usd_growth = current_capital['USD'] - prev_capital['USD']
            
            rub_growth_percent = (rub_growth / prev_capital['RUB'] * 100) if prev_capital['RUB'] > 0 else 0
            usd_growth_percent = (usd_growth / prev_capital['USD'] * 100) if prev_capital['USD'] > 0 else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            growth_emoji_rub = "üìà" if rub_growth >= 0 else "üìâ"
            growth_emoji_usd = "üìà" if usd_growth >= 0 else "üìâ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
            current_month_name = format_ru_month_label(now)
            prev_month_name = format_ru_month_label(prev_month_last_day)
            
            text = "\n".join([
                f"üìä –î–∏–Ω–∞–º–∏–∫–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:",
                f"",
                f"üá∑üá∫ RUB:",
                f"  {prev_month_name}: {fmt_money_str(str(prev_capital['RUB']))}",
                f"  {current_month_name}: {fmt_money_str(str(current_capital['RUB']))}",
                f"  {growth_emoji_rub} {fmt_money_str(str(rub_growth))} ({rub_growth_percent:+.1f}%)",
                f"",
                f"üá∫üá∏ USD:",
                f"  {prev_month_name}: {fmt_money_str(str(prev_capital['USD']))}",
                f"  {current_month_name}: {fmt_money_str(str(current_capital['USD']))}",
                f"  {growth_emoji_usd} {fmt_money_str(str(usd_growth))} ({usd_growth_percent:+.1f}%)",
            ])
            
            await message.answer(text)
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞: {str(e)}")


@asset_router.message(F.text == "/snapshot_asset")
async def create_snapshot(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /snapshot_asset: —Å–æ–∑–¥–∞—ë—Ç —Å–Ω—ç–ø—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞."""
    
    user_id = message.from_user.id
    async with await get_session() as session:
        service = AssetService(session)
        
        try:
            # –°–æ–∑–¥–∞—ë–º —Å–Ω—ç–ø—à–æ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            success = await service.create_monthly_snapshot(user_id)
            
            if not success:
                await message.answer("üì∏ –°–Ω—ç–ø—à–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–∞
            capital = await service.get_current_capital(user_id, ["RUB", "USD"])
            
            text = "\n".join([
                "üì∏ –°–Ω—ç–ø—à–æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ —Å–æ–∑–¥–∞–Ω!",
                "",
                f"üìä –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:",
                f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(capital['RUB']))} RUB",
                f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(capital['USD']))} USD",
                "",
                "üí° –°–Ω—ç–ø—à–æ—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∫–∞–ø–∏—Ç–∞–ª–∞."
            ])
            
            await message.answer(text)
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω—ç–ø—à–æ—Ç–∞: {str(e)}")


@asset_router.message(F.text == "/list_assets")
async def list_assets(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_assets: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤."""
    
    user_id = message.from_user.id
    async with await get_session() as session:
        try:
            service = AssetService(session)
            assets_by_currency = await service.get_detailed_assets_list(user_id)
            
            if not assets_by_currency:
                await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text_parts = ["üíº **–î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤:**\n"]
            
            total_usd = 0
            total_rub = 0
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤ USD –∏ RUB
            from app.utils.rates import CurrencyConverter
            converter = CurrencyConverter()
            await converter.update_fiat_rates()
            await converter.update_crypto_rates()
            
            for currency, currency_assets in assets_by_currency.items():
                # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∂–∏—Ä–Ω—ã–º –∫—É—Ä—Å–∏–≤–æ–º
                text_parts.append(f"***{currency}:***")
                
                currency_total = 0
                for asset in currency_assets:
                    amount = float(asset.amount)
                    currency_total += amount
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏
                    category_name = asset.category_name or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                    if currency in ["BTC", "ETH", "SOL", "USDT", "USDC", "TRX"]:
                        formatted_amount = fmt_crypto_str(str(amount), currency)
                    else:
                        formatted_amount = fmt_money_str(str(amount))
                    text_parts.append(f"  {category_name}: {formatted_amount}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD –∏ RUB –¥–ª—è –æ–±—â–µ–≥–æ –∏—Ç–æ–≥–∞
                try:
                    usd_value = await converter.convert(currency_total, currency, "USD")
                    rub_value = await converter.convert(currency_total, currency, "RUB")
                    total_usd += usd_value
                    total_rub += rub_value
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {currency}: {e}")
                
                text_parts.append("")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
            text_parts.extend([
                "üìä **–û–±—â–∏–µ –∏—Ç–æ–≥–∏:**",
                f"‚Ä¢ üá∫üá∏ **USD:** {fmt_money_str(str(total_usd))}",
                f"‚Ä¢ üá∑üá∫ **RUB:** {fmt_money_str(str(total_rub))}",
                "",
                f"üìÖ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {currency_assets[0].last_updated.strftime('%d.%m.%Y %H:%M') if currency_assets else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            ])
            
            text = "\n".join(text_parts)
            await message.answer(text, parse_mode="Markdown")
            
        except Exception as e:
            print(f"ERROR in list_assets: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤: {str(e)}")
