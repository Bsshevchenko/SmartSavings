from aiogram import Router, F
from aiogram.types import Message
import logging
from datetime import datetime, timedelta, timezone

from app.db import get_session
from app.utils.reports import (
    report_for_assets,
    report_asset_growth,
    report_asset_snapshot_created,
    report_assets_detailed_list,
    report_asset_no_history,
)
from app.utils.formatting import fmt_money_str
from app.services.asset_service import AssetService
from app.services.analytics.asset.asset_analytics import get_growth_data, compute_totals_usd_rub

asset_router = Router()


@asset_router.message(F.text == "/get_asset")
async def get_asset(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_asset: –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª."""

    user_id = message.from_user.id
    
    async with await get_session() as session:
        try:
            service = AssetService(session)
            capital = await service.get_current_capital(user_id, ["RUB", "USD"])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤—ã
            if all(value == 0 for value in capital.values()):
                await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤.")
                return
            
            await message.answer(report_for_assets(label="–¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª", totals=capital))
            
        except Exception:
            logging.exception("ERROR in get_asset")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∫–∞–ø–∏—Ç–∞–ª–∞")


@asset_router.message(F.text == "/grow_asset")
async def grow_asset(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /grow_asset: –≤—ã–≤–æ–¥–∏—Ç —Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º."""

    user_id = message.from_user.id
    async with await get_session() as session:
        service = AssetService(session)
        
        try:
            prev_date, current_date, prev_capital, current_capital = await get_growth_data(service, user_id)

            if all(value == 0 for value in current_capital.values()) and all(value == 0 for value in prev_capital.values()):
                await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤.")
                return

            if all(value == 0 for value in prev_capital.values()):
                await message.answer(report_asset_no_history(current_capital))
                return

            text = report_asset_growth(prev_date, current_date, prev_capital, current_capital)
            await message.answer(text)

        except Exception:
            logging.exception("ERROR in grow_asset")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞")


@asset_router.message(F.text == "/snapshot_asset")
async def create_snapshot(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /snapshot_asset: —Å–æ–∑–¥–∞—ë—Ç —Å–Ω—ç–ø—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞."""
    
    user_id = message.from_user.id
    async with await get_session() as session:
        service = AssetService(session)
        
        try:
            success = await service.create_monthly_snapshot(user_id)

            if not success:
                await message.answer("üì∏ –°–Ω—ç–ø—à–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã.")
                return

            capital = await service.get_current_capital(user_id, ["RUB", "USD"])
            text = report_asset_snapshot_created(capital)
            await message.answer(text)

        except Exception:
            logging.exception("ERROR in create_snapshot")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω—ç–ø—à–æ—Ç–∞")


@asset_router.message(F.text == "/list_assets")
async def list_assets(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_assets: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤."""
    
    user_id = message.from_user.id
    async with await get_session() as session:
        try:
            service = AssetService(session)
            assets_by_currency = await service.get_detailed_assets_list(user_id)

            if not assets_by_currency:
                await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤.")
                return

            total_usd, total_rub, updated_at = await compute_totals_usd_rub(assets_by_currency)
            text = report_assets_detailed_list(assets_by_currency, total_usd, total_rub, updated_at)
            await message.answer(text, parse_mode="Markdown")
            
        except Exception:
            logging.exception("ERROR in list_assets")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤")
