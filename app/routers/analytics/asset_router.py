from aiogram import Router, F
from aiogram.types import Message
from datetime import datetime, timedelta, timezone

from app.db import get_session
from app.repo.entry_fetcher import EntryFetcher
from app.utils.date_ranges import get_month_range
from app.utils.reports import report_for_assets
from app.utils.formatting import format_ru_month_label, fmt_money_str

asset_router = Router()


@asset_router.message(F.text == "/get_asset")
async def get_asset(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_asset: –≤—ã–≤–æ–¥–∏—Ç –∫–∞–ø–∏—Ç–∞–ª –∑–∞ –º–µ—Å—è—Ü."""

    user_id = message.from_user.id
    session = await get_session()
    fetcher = EntryFetcher(session, user_id)

    now = datetime.now(timezone.utc)

    # 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month_range = get_month_range(now)
    entries, currency_map = await fetcher.fetch_entries(current_month_range, mode="asset")

    # 2. –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç ‚Üí –±–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    if not entries:
        prev_month_date = (now.replace(day=1) - timedelta(days=1))  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
        prev_month_range = get_month_range(prev_month_date)
        entries, currency_map = await fetcher.fetch_entries(prev_month_range, mode="asset")
        month_label = format_ru_month_label(prev_month_date)
    else:
        month_label = format_ru_month_label(now)

    if not entries:
        await message.answer("üìä –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∞–∫—Ç–∏–≤–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã.")
        return

    # 3. –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–∏ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
    totals = await fetcher.calculate_converted_totals(entries, currency_map, targets=["RUB", "USD"])

    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
    await message.answer(report_for_assets(label=month_label, totals=totals))


@asset_router.message(F.text == "/grow_asset")
async def grow_asset(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /grow_asset: –≤—ã–≤–æ–¥–∏—Ç —Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º."""

    user_id = message.from_user.id
    session = await get_session()
    fetcher = EntryFetcher(session, user_id)

    now = datetime.now(timezone.utc)

    # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_range = get_month_range(now)
    current_entries, current_currency_map = await fetcher.fetch_entries(current_range, mode="asset")
    current_totals = await fetcher.calculate_converted_totals(current_entries, current_currency_map, targets=["RUB", "USD"]) if current_entries else {}

    # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    prev_month_date = (now.replace(day=1) - timedelta(days=1))
    prev_range = get_month_range(prev_month_date)
    prev_entries, prev_currency_map = await fetcher.fetch_entries(prev_range, mode="asset")
    prev_totals = await fetcher.calculate_converted_totals(prev_entries, prev_currency_map, targets=["RUB", "USD"]) if prev_entries else {}

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ–≤—Å–µ–º
    if not current_entries and not prev_entries:
        await message.answer("üìä –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∞–∫—Ç–∏–≤–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã.")
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    if not current_entries and prev_entries:
        await message.answer(
            f"üìä –î–∞–Ω–Ω—ã—Ö –∑–∞ {format_ru_month_label(now)} –Ω–µ—Ç.\n"
            f"–ö–∞–ø–∏—Ç–∞–ª –∑–∞ {format_ru_month_label(prev_month_date)}:\n"
            f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(prev_totals.get('RUB', 0)))} RUB\n"
            f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(prev_totals.get('USD', 0)))} USD"
        )
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    if current_entries and not prev_entries:
        await message.answer(
            f"üìä –î–∞–Ω–Ω—ã—Ö –∑–∞ {format_ru_month_label(prev_month_date)} –Ω–µ—Ç.\n"
            f"–ö–∞–ø–∏—Ç–∞–ª –∑–∞ {format_ru_month_label(now)}:\n"
            f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(current_totals.get('RUB', 0)))} RUB\n"
            f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(current_totals.get('USD', 0)))} USD"
        )
        return

    # –ï—Å—Ç—å –æ–±–∞ –º–µ—Å—è—Ü–∞ ‚Üí —Å—á–∏—Ç–∞–µ–º —Ä–æ—Å—Ç
    rub_growth = current_totals["RUB"] - prev_totals["RUB"]
    usd_growth = current_totals["USD"] - prev_totals["USD"]

    text = "\n".join([
        f"üìà –†–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ ({format_ru_month_label(prev_month_date)} ‚Üí {format_ru_month_label(now)}):",
        f"‚Ä¢ üá∑üá∫ {fmt_money_str(str(rub_growth))} RUB "
        f"(–±—ã–ª–æ {fmt_money_str(str(prev_totals['RUB']))}, —Å—Ç–∞–ª–æ {fmt_money_str(str(current_totals['RUB']))})",
        f"‚Ä¢ üá∫üá∏ {fmt_money_str(str(usd_growth))} USD "
        f"(–±—ã–ª–æ {fmt_money_str(str(prev_totals['USD']))}, —Å—Ç–∞–ª–æ {fmt_money_str(str(current_totals['USD']))})",
    ])
    await message.answer(text)
